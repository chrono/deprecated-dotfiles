# Filename: $HOME/.zsh/zsh_prompt
# Purpose:  prompt stuff for zsh
# Author:   Michael Prokop / www.michael-prokop.at
# Latest change: Son Apr 18 16:55:47 CEST 2004
################################################################################
# History:
# 040418 initial version
################################################################################

# function precmd {
#     local L_USERHOST L_HISTLINE L_PATH L_TTY L_EXITCODE
#     local IFS=$' \t\n'
#     # reset title for xterm and screen
#     # note: only useful with 'shelltitle' in screenrc
#     case $TERM in
# 	xterm*)
# 	    print -Pn "\e]2;xterm\a" 
# 	    ;;
# 	*)
# 	    [[ ! -z $STY ]] && print -Pn "\ek\e\\"
# 	    ;;
#     esac
# 
#     L_USERHOST="%n@%m  "
#     L_TTY="%y  "
#     L_HISTLINE="[%!]  "
#     L_PATH="%~"
#     L_EXITCODE="%(?..%? )"
#     PROMPT="%B${L_EXITCODE}%b${L_USERHOST}${L_TTY}${L_HISTLINE}%B%$(($COLUMNS-5-${#${(%)L_USERHOST}}-${#${(%)L_TTY}}-${#${(%)L_HISTLINE}}))<..<${L_PATH}%<<%b"$'\n'"%(!.#.$) "
#     checkmail
# 
# }
# 
# function preexec () {
#     # set xterm|screen title
#     case $TERM in
# 	xterm*)
# 	    print -n "\e]2;${${${${1## #}/(#s)[[:upper:]]#=[[:alnum:]]# /}##(fakeroot|time|exec|sudo) }%% *}\a" 
# 	    ;;
# 	*)
# 	    if [[ ! -z $STY ]]; then
# 		print -n "\ek${${${${1## #}/(#s)[[:upper:]]#=[[:alnum:]]# /}##(fakeroot|exec|time|sudo) }%% *}\e\\"
# 	    fi
# 	    ;;
#     esac
# } 
# 
# Local Variables:
# mode: shell-script
# sh-shell: zsh
# End:
# ====================================================================
# The "prompt" of the shell.
# See "man zsh" -> "
# %B    Bold ON
# %n    $USERNAME.
# %b    Bold OFF
# @     literal '@'
# %m    machine name.
# :     literal ':'
# %Nc   "relative path", ie last N components of $PWD.
# >     literal '>'

# alias ____='echo "X[mX(BX)0OX[?5lX7X[rX8" | tr 'XO' '\033\017''

# PS1string='%B%n%b@%m:%4c>'
# alias _prompt='PS1=$PS1string'
# _prompt

# alias _PS1="PS1='%B%n%b@%m:%4c>'"
# _PS1

# PS1="%B%n%b@%m:%4c>"
# PS1="%B%n%b@%m:%4c %! $ "
# PS1=$'%{\e[1;31m%}%B%n%b@%m:%4c %! $ %{\e[0m%}'
  PS1=$'%{\e[1;31m%}%B%n%b@%m:%4c $ %{\e[0m%}'

function precmd {

local TERMWIDTH
(( TERMWIDTH = ${COLUMNS} - 1 ))

###
# See if we can use colors.

# Must have the zsh/termcap module loaded for this
if [[ $terminfo[colors] -ge 8 ]]; then
    local RED="%{[1;31m%}"
    local LIGHT_RED="%{[0;31m%}"
    local CYAN="%{[1;36m%}"
    local LIGHT_CYAN="%{[0;36m%}"
    local BLUE="%{[1;34m%}"
    local LIGHT_BLUE="%{[0;34m%}"
    local GREEN="%{[1;32m%}"
    local LIGHT_GREEN="%{[0;32m%}"
    local MAGENTA="%{[1;35m%}"
    local LIGHT_MAGENTA="%{[0;35m%}"
    local YELLOW="%{[1;33m%}"
    local LIGHT_YELLOW="%{[0;33m%}"
    local GRAY="%{[1;30m%}"
    local LIGHT_GRAY="%{[0;37m%}"
    local WHITE="%{[1;37m%}"
    local NO_COLOUR="%{[0m%}"
    local BEGINNING_OF_LINE="%{[80D%}"
else
    local RED=""
    local LIGHT_RED=""
    local CYAN=""
    local LIGHT_CYAN=""
    local BLUE=""
    local LIGHT_BLUE=""
    local GREEN=""
    local LIGHT_GREEN=""
    local MAGENTA=""
    local LIGHT_MAGENTA=""
    local YELLOW=""
    local LIGHT_YELLOW=""
    local GRAY=""
    local LIGHT_GRAY=""
    local WHITE=""
    local NO_COLOUR=""
    local BEGINNING_OF_LINE=""
fi

###
# Decide whether to set a screen title
if [[ "$STY" != "" ]]; then
    local STITLE='%{kzsh\%}'
else
    local STITLE=''
fi

###
# Decide if we need to set titlebar text.
case $TERM in
    xterm*)
	local TITLEBAR='%{]0;%n@%m:%~%}'
	;;
    screen)
	local TITLEBAR='%{]0;screen  (t) %n@%m:%~%}'
	;;
    *)
	local TITLEBAR=""
	;;
esac

###
# See if we can use extended characters to look nicer.

case $TERM in
    linux|xterm*)
	local SHIFT_IN='%{%}'
	local SHIFT_OUT='%{%}'
	local HBAR='q'
	local ULCORNER='l'
	local LLCORNER='m'
	local LRCORNER='j'
	local URCORNER='k'
	;;
    *)
	local SHIFT_IN=""
	local SHIFT_OUT=""
	local HBAR='-'
	local ULCORNER='-'
	local LLCORNER='-'
	local LRCORNER='-'
	local URCORNER='-'
	;;
esac

###
# Truncate the path if it's to long.
local fill=""
local pwdlen=""

let local promptsize=$(print -Pn -- "--(%n@%m:%l)---()--" | wc -c | tr -d " ")
let local pwdsize=$(print -Pn -- "%~" | wc -c | tr -d " ")

if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
   let pwdlen="$TERMWIDTH - $promptsize"
else
   let fillsize="$TERMWIDTH - ($promptsize + $pwdsize)"
   while [[ $fillsize -gt 0 ]] 
   do 
      fill="${fill}$HBAR"
      let fillsize=${fillsize}-1
   done
fi

###
# Finally, the prompt.

PROMPT="$STITLE$TITLEBAR$BEGINNING_OF_LINE\
$CYAN$SHIFT_IN$ULCORNER$BLUE$HBAR$SHIFT_OUT(\
$RED%n@%m:%l\
$BLUE)$SHIFT_IN$HBAR$CYAN$HBAR$fill$BLUE$HBAR$SHIFT_OUT(\
$MAGENTA%$pwdlen<...<%~%<<\
$BLUE)$SHIFT_IN$HBAR$CYAN$URCORNER$SHIFT_OUT\

$CYAN$SHIFT_IN$LLCORNER$BLUE$HBAR$SHIFT_OUT(\
%(?..$LIGHT_RED%?$BLUE:)\
$YELLOW%D{%H:%M}\
$LIGHT_BLUE:$WHITE%#$BLUE)$SHIFT_IN$HBAR$SHIFT_OUT\
$CYAN$SHIFT_IN$HBAR$SHIFT_OUT\
$NO_COLOUR "

RPROMPT=" $CYAN$SHIFT_IN$HBAR$BLUE$HBAR$SHIFT_OUT\
($YELLOW%D{%A, %D}$BLUE)$SHIFT_IN$HBAR$CYAN$LRCORNER$SHIFT_OUT$NO_COLOUR"

PS2="$CYAN$SHIFT_IN$HBAR$SHIFT_OUT\
$BLUE$SHIFT_IN$HBAR$SHIFT_OUT(\
$LIGHT_GREEN%_$BLUE)$SHIFT_IN$HBAR$SHIFT_OUT\
$CYAN$SHIFT_IN$HBAR$SHIFT_OUT$NO_COLOUR "

}

preexec () {
    if [[ "$STY" != "" ]]; then
	local CMD=`echo $1 | sed 's/^sudo //; s/ .*//'`
	echo -n "k$CMD\\"
    fi
}

## Some stuff which does not work...
# FIXXME - does not work, try to remove all "not necessary tags"
#  leoorg () { T=~/.tmp/dict_leo_"$1".html; lynx -source "http://dict.leo.org/?search="$1"" > $T ; lynx "$T" }
#  vim `l\s -t * | head -1 ` }
#
# FIXXME - does not work :-(
#  alias en1='lynx -source "http://dictionaries.travlang.com/ItalianGerman/dict.cgi?query="$1""'
#\!^" '
#sed -n "//,/<\/pre>/p" | grep -v "pre>" ' 

################ END OF FILE ###################################################
